// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudwatchConfigInitParameters struct {

	// – S3 configuration for delivering a large amount of data. See s3_config.
	LargeDataDeliveryS3Config []LargeDataDeliveryS3ConfigInitParameters `json:"largeDataDeliveryS3Config,omitempty" tf:"large_data_delivery_s3_config,omitempty"`

	// – Log group name.
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name,omitempty"`

	// – IAM Role ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`
}

type CloudwatchConfigObservation struct {

	// – S3 configuration for delivering a large amount of data. See s3_config.
	LargeDataDeliveryS3Config []LargeDataDeliveryS3ConfigObservation `json:"largeDataDeliveryS3Config,omitempty" tf:"large_data_delivery_s3_config,omitempty"`

	// – Log group name.
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name,omitempty"`

	// – IAM Role ARN.
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`
}

type CloudwatchConfigParameters struct {

	// – S3 configuration for delivering a large amount of data. See s3_config.
	// +kubebuilder:validation:Optional
	LargeDataDeliveryS3Config []LargeDataDeliveryS3ConfigParameters `json:"largeDataDeliveryS3Config,omitempty" tf:"large_data_delivery_s3_config,omitempty"`

	// – Log group name.
	// +kubebuilder:validation:Optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name,omitempty"`

	// – IAM Role ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`
}

type LargeDataDeliveryS3ConfigInitParameters struct {

	// – S3 bucket name.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// – S3 object key prefix.
	KeyPrefix *string `json:"keyPrefix,omitempty" tf:"key_prefix,omitempty"`
}

type LargeDataDeliveryS3ConfigObservation struct {

	// – S3 bucket name.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// – S3 object key prefix.
	KeyPrefix *string `json:"keyPrefix,omitempty" tf:"key_prefix,omitempty"`
}

type LargeDataDeliveryS3ConfigParameters struct {

	// – S3 bucket name.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// – S3 object key prefix.
	// +kubebuilder:validation:Optional
	KeyPrefix *string `json:"keyPrefix,omitempty" tf:"key_prefix,omitempty"`
}

type LoggingConfigInitParameters struct {

	// – CloudWatch logging configuration. See cloudwatch_config.
	CloudwatchConfig []CloudwatchConfigInitParameters `json:"cloudwatchConfig,omitempty" tf:"cloudwatch_config,omitempty"`

	// – Set to include embeddings data in the log delivery.
	EmbeddingDataDeliveryEnabled *bool `json:"embeddingDataDeliveryEnabled,omitempty" tf:"embedding_data_delivery_enabled,omitempty"`

	// – Set to include image data in the log delivery.
	ImageDataDeliveryEnabled *bool `json:"imageDataDeliveryEnabled,omitempty" tf:"image_data_delivery_enabled,omitempty"`

	// – S3 configuration for storing log data. See s3_config.
	S3Config []S3ConfigInitParameters `json:"s3Config,omitempty" tf:"s3_config,omitempty"`

	// – Set to include text data in the log delivery.
	TextDataDeliveryEnabled *bool `json:"textDataDeliveryEnabled,omitempty" tf:"text_data_delivery_enabled,omitempty"`
}

type LoggingConfigObservation struct {

	// – CloudWatch logging configuration. See cloudwatch_config.
	CloudwatchConfig []CloudwatchConfigObservation `json:"cloudwatchConfig,omitempty" tf:"cloudwatch_config,omitempty"`

	// – Set to include embeddings data in the log delivery.
	EmbeddingDataDeliveryEnabled *bool `json:"embeddingDataDeliveryEnabled,omitempty" tf:"embedding_data_delivery_enabled,omitempty"`

	// – Set to include image data in the log delivery.
	ImageDataDeliveryEnabled *bool `json:"imageDataDeliveryEnabled,omitempty" tf:"image_data_delivery_enabled,omitempty"`

	// – S3 configuration for storing log data. See s3_config.
	S3Config []S3ConfigObservation `json:"s3Config,omitempty" tf:"s3_config,omitempty"`

	// – Set to include text data in the log delivery.
	TextDataDeliveryEnabled *bool `json:"textDataDeliveryEnabled,omitempty" tf:"text_data_delivery_enabled,omitempty"`
}

type LoggingConfigParameters struct {

	// – CloudWatch logging configuration. See cloudwatch_config.
	// +kubebuilder:validation:Optional
	CloudwatchConfig []CloudwatchConfigParameters `json:"cloudwatchConfig,omitempty" tf:"cloudwatch_config,omitempty"`

	// – Set to include embeddings data in the log delivery.
	// +kubebuilder:validation:Optional
	EmbeddingDataDeliveryEnabled *bool `json:"embeddingDataDeliveryEnabled" tf:"embedding_data_delivery_enabled,omitempty"`

	// – Set to include image data in the log delivery.
	// +kubebuilder:validation:Optional
	ImageDataDeliveryEnabled *bool `json:"imageDataDeliveryEnabled" tf:"image_data_delivery_enabled,omitempty"`

	// – S3 configuration for storing log data. See s3_config.
	// +kubebuilder:validation:Optional
	S3Config []S3ConfigParameters `json:"s3Config,omitempty" tf:"s3_config,omitempty"`

	// – Set to include text data in the log delivery.
	// +kubebuilder:validation:Optional
	TextDataDeliveryEnabled *bool `json:"textDataDeliveryEnabled" tf:"text_data_delivery_enabled,omitempty"`
}

type ModelInvocationLoggingConfigurationInitParameters struct {

	// The logging configuration values to set. See logging_config.
	LoggingConfig []LoggingConfigInitParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`
}

type ModelInvocationLoggingConfigurationObservation struct {

	// AWS region in which logging is configured.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The logging configuration values to set. See logging_config.
	LoggingConfig []LoggingConfigObservation `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`
}

type ModelInvocationLoggingConfigurationParameters struct {

	// The logging configuration values to set. See logging_config.
	// +kubebuilder:validation:Optional
	LoggingConfig []LoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

type S3ConfigInitParameters struct {

	// – S3 bucket name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Reference to a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameRef *v1.Reference `json:"bucketNameRef,omitempty" tf:"-"`

	// Selector for a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameSelector *v1.Selector `json:"bucketNameSelector,omitempty" tf:"-"`

	// – S3 object key prefix.
	KeyPrefix *string `json:"keyPrefix,omitempty" tf:"key_prefix,omitempty"`
}

type S3ConfigObservation struct {

	// – S3 bucket name.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// – S3 object key prefix.
	KeyPrefix *string `json:"keyPrefix,omitempty" tf:"key_prefix,omitempty"`
}

type S3ConfigParameters struct {

	// – S3 bucket name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// Reference to a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameRef *v1.Reference `json:"bucketNameRef,omitempty" tf:"-"`

	// Selector for a Bucket in s3 to populate bucketName.
	// +kubebuilder:validation:Optional
	BucketNameSelector *v1.Selector `json:"bucketNameSelector,omitempty" tf:"-"`

	// – S3 object key prefix.
	// +kubebuilder:validation:Optional
	KeyPrefix *string `json:"keyPrefix,omitempty" tf:"key_prefix,omitempty"`
}

// ModelInvocationLoggingConfigurationSpec defines the desired state of ModelInvocationLoggingConfiguration
type ModelInvocationLoggingConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ModelInvocationLoggingConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ModelInvocationLoggingConfigurationInitParameters `json:"initProvider,omitempty"`
}

// ModelInvocationLoggingConfigurationStatus defines the observed state of ModelInvocationLoggingConfiguration.
type ModelInvocationLoggingConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ModelInvocationLoggingConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ModelInvocationLoggingConfiguration is the Schema for the ModelInvocationLoggingConfigurations API. Manages Bedrock model invocation logging configuration.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ModelInvocationLoggingConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loggingConfig) || (has(self.initProvider) && has(self.initProvider.loggingConfig))",message="spec.forProvider.loggingConfig is a required parameter"
	Spec   ModelInvocationLoggingConfigurationSpec   `json:"spec"`
	Status ModelInvocationLoggingConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ModelInvocationLoggingConfigurationList contains a list of ModelInvocationLoggingConfigurations
type ModelInvocationLoggingConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ModelInvocationLoggingConfiguration `json:"items"`
}

// Repository type metadata.
var (
	ModelInvocationLoggingConfiguration_Kind             = "ModelInvocationLoggingConfiguration"
	ModelInvocationLoggingConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ModelInvocationLoggingConfiguration_Kind}.String()
	ModelInvocationLoggingConfiguration_KindAPIVersion   = ModelInvocationLoggingConfiguration_Kind + "." + CRDGroupVersion.String()
	ModelInvocationLoggingConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(ModelInvocationLoggingConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&ModelInvocationLoggingConfiguration{}, &ModelInvocationLoggingConfigurationList{})
}
